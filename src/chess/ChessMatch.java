package chess;

import java.security.InvalidParameterException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import boardgame.Board;
import boardgame.Piece;
import boardgame.Position;
import chess.pieces.Bishop;
import chess.pieces.King;
import chess.pieces.Knight;
import chess.pieces.Pawn;
import chess.pieces.Queen;
import chess.pieces.Rook;

public class ChessMatch {
	// essa classe possui as regras do jogo de xadrez
	
	private int turn;
	private Color currentPlayer;
	private Board board;
	private boolean check;//Obs: boolean pro padrão começa com false
	private boolean checkMate;
	private ChessPiece enPassantVunerable;// por padrão começa com null
	private ChessPiece promoted;
	
	private List<Piece> piecesOnTheBoard = new ArrayList<>();
	private List<Piece> capturedPieces = new ArrayList<>();
	
	/*-----------------------------------------------------------------------------------------------------*/
	
	public ChessMatch() {
		board = new Board(8, 8);
		turn = 1;
		currentPlayer = Color.WHITE;
		/*check = false;// poderia fazer isso só para enfatizar, o check já começa com false por padrão*/
		initialSetup();//note q quando cria a partida já faz o initial setup
	}
	
	/*-----------------------------------------------------------------------------------------------------*/
	
	public int getTurn() {
		return turn;
	}
	
	public Color getCurrentPlayer() {
		return currentPlayer;
	}
	
	public boolean getCheck() {
		return check;
	}
	
	public boolean getCheckMate() {
		return checkMate;
	}
	
	/*public void setTurn( int turn ) {
		this.turn = turn;
	}
	
	public void setCurrentPlayer( Color currentPlayer) {
		this.currentPlayer = currentPlayer;
	}*/
	
	public ChessPiece getEnPassantVunerable() {
		return enPassantVunerable;
	}
	
	public ChessPiece getPromoted() {
		return promoted;
	}
	/*-----------------------------------------------------------------------------------------------------*/
	
	public ChessPiece[][] getPieces(){// esse método retorna uma matriz de peças de xadrez (ChessPiece) 
		// correspondentes a essa partida
		//note q o programa (acho q o ChessMatch) só tera acesso ao ChessPiece e nao ao Piece
		//O programa irá conhecer apenas a camada de xadrez e nao a camada de tabuleiro
		
		ChessPiece[][] mat = new ChessPiece[board.getRows()][board.getColumns()];
		for(int i = 0; i <board.getRows(); i++ ) {
			for(int j = 0; j<board.getColumns(); j++ ) {
				mat[i][j] = (ChessPiece) board.piece(i, j);// note que foi necessário fazer um cast para poder 
				//fazer o downcasting
			}
		}
		
		return mat;
	}
	
	public boolean[][] possibleMoves( ChessPosition sourcePosition ){//retorna uma matriz de movimentos possíveis
		// a partir de uma posição. Note q diferente do método possibleMoves da classe piece, esse recebe uma 
		// posição como parâmetro
		
		Position position = sourcePosition.toPosition();
		validateSourcePosition(position);
		return board.piece(position).possibleMoves();
		
	}
	
	public ChessPiece performChessMove( ChessPosition sourcePosition, ChessPosition targetPosition ) {
		// move uma peça, tira ela da posição de origem e coloca na posição de destino
		// se for o caso retorna uma peça capturada( q foi comida)
		//também teste e altera se o rei está em cheque
		
		Position source = sourcePosition.toPosition();// estamos convertendo a ChessPosition para Position(posição
		// de matriz )
		Position target = targetPosition.toPosition();
		validateSourcePosition(source);// valida a posição de origem, se essa posição não existir lança uma exceção
		// acho q seria melhor colocar o validate antes de receber o targetPosition
		validateTargetPosition(source, target);
		Piece capturedPiece = makeMove(source, target);// makeMove realiza o movimento da peça e retorna a peça 
		// capturada
		
		// testa se o jogador não se colocou em cheque, ou se o jogador continua em cheque
		if( testCheck( currentPlayer )){// testa se o jogador não se colocou em cheque
			undoMove(source, target, capturedPiece);// desfaz a jogada
			throw new ChessException("You can´t put yourself in check");
			//note q se entrar nesse if o método não executa o nextTurn
		}
		
		ChessPiece movedPiece = (ChessPiece)board.piece(target);// será utilizado para o enPassant
		
		
		// #specialmove promotion
		// note q devemos fazer o promotion antes de testar se o adversário está em cheque, pois a peça q o peão
		// se transformar pode mudar a situação de cheque do adversário
		
		promoted = null; // para assegurar q estamos fazendo um novo teste, também será usado no programa 
		// principal
		
		if( movedPiece instanceof Pawn ) {
			if( ( movedPiece.getColor() == Color.WHITE && target.getRow() == 0 ) || 
					movedPiece.getColor() == Color.BLACK && target.getRow() == 7 ) {
				 promoted = (ChessPiece)board.piece(target);// para não correr o risco de chamar o método
				 // replacePromotedPiece com promoted = null
				 promoted = replacePromotedPiece("Q"); // ("Q") é um macete, colocamos o "Q" como padrão para
				 // facilitar a programação da interação com o usuário
				 // será usado pelo programa principal
			}
		}
		
		// testa se a jogada colocou o oponente em cheque
		check = testCheck( opponent(currentPlayer) ) == true ? true: false;// testa se a jogada colocou o 
		// oponente em cheque, caso sim check = true caso nao check = false
		
		
		// testa se a jogada colcou o oponente em cheque-mate
		if( testCheckMate(opponent(currentPlayer)) ) {//caso o adversário esteja em cheque-mate
			checkMate = true;
		}else {
			nextTurn();// continua o jogo
		}
		
		//note q o peão só fica vunerável ao enPassan depois do nextTurn
		// #special move enPassant
		
		if( movedPiece instanceof Pawn && ( target.getRow() == source.getRow() - 2  || 
				target.getRow() == source.getRow() + 2 ) ) {// já faz o teste para o peão de ambos os jogadores
			enPassantVunerable = movedPiece;
		}else {
			enPassantVunerable = null;
		}
		
		
		return (ChessPiece)capturedPiece;	
	}
	
	public ChessPiece replacePromotedPiece( String type ) {// CUIDADO!!!!! a jogada promotion está cheia de bugs
		// promove um peão a uma torre ou cavalo ou bispo ou 
		// rainha
		if( promoted == null ) {// programação defensiva
			throw new IllegalStateException("There is no piece to be promoted");
		}
		
		if( !type.equals("R") && !type.equals("N") && !type.equals("B") && !type.equals("Q") ) {
			throw new InvalidParameterException("Invalid type for promotion");
		}
		
		Position pos = promoted.getChessPosition().toPosition();
		Piece p = board.removePiece(pos);	
		piecesOnTheBoard.remove(p);
		
		ChessPiece newPiece = newPiece(type, promoted.getColor() );
		board.placePiece(newPiece, pos);// coloca a nova peça na posição da peça promovida
		piecesOnTheBoard.add(newPiece);
		
		return newPiece;
	}
	
	private ChessPiece newPiece( String type, Color color ) {
		if( type.equals("B")) return new Bishop(board, color);
		if( type.equals("N")) return new Knight(board, color);
		if( type.equals("Q")) return new Queen(board, color);
		return new Rook(board, color); // se não entrar nos outros ifs cai nessa linha, não precisa testar
		// pois esse caso já foi tratado
	}
	
	private Piece makeMove( Position source, Position target ) {// makeMove realiza o movimento da peça
		
		ChessPiece p = (ChessPiece)board.removePiece(source);//remove do tabuleiro a peça na posição de origem
		//p foi criado como ChessPiece ao invés de Piece para  poder usar o increaseMovecount
		p.increaseMoveCount();
		Piece capturedPiece = board.removePiece(target);//remove do tabuleiro a peça da posição de destino
		// note q o removePiece pode retornar null
		// agora q removemos uma peça da posição de origem e também uma possível peça da posição de destino
		// vamos colocar mover a peça da posição de origem para a posição de destino
		// note q a posição de destino deve ser validada antes, esse método só realiza o movimento
		board.placePiece(p, target);
		
		if( capturedPiece != null ) {
			piecesOnTheBoard.remove(capturedPiece);
			capturedPieces.add(capturedPiece);
		}
		
		
		// #specialmove castling kingside rook, roque da direita do rei
		//faço movimento da torre
		
		if( p instanceof King && target.getColumn() ==  source.getColumn() + 2) {//se moveu o rei duas casa para
			// a direita, então foi realizado o kingside castling
			
			Position sourceT = new Position(source.getRow(), source.getColumn() + 3 );
			Position targetT = new Position(source.getRow(), source.getColumn() + 1 );// posição de destino da
			// torre
			ChessPiece rook = (ChessPiece) board.removePiece(sourceT);
			board.placePiece(rook, targetT);
			rook.increaseMoveCount();
		}
				
		// #specialmove castling QueenSide rook, roque da esquerda do rei
		//faço movimento da torre
		
		if( p instanceof King && target.getColumn() ==  source.getColumn() - 2) {//se moveu o rei duas casa para
			// a esquerda, então foi realizado o QueenSide castling
			
			Position sourceT = new Position(source.getRow(), source.getColumn() - 4 );
			Position targetT = new Position(source.getRow(), source.getColumn() - 1 );// posição de destino da
			// torre
			ChessPiece rook = (ChessPiece) board.removePiece(sourceT);
			board.placePiece(rook, targetT);
			rook.increaseMoveCount();
		}
		
		
		// #specialMove enPassant
		
		if( p instanceof Pawn ) {
			if( source.getColumn() != target.getColumn() && capturedPiece == null ) {// note q caso o peão tenha
				// movido na diagonal ele deveria ter comido uma peça então ele realizou o enPassant
				
				Position pawnPosition;
				if( p.getColor() == Color.WHITE ) {//caso seja o peão branco q realiza o enPassant contra um peão
					// preto
					pawnPosition = new Position( target.getRow() + 1, target.getColumn() );// posição do peão q será 
					// capturado
				}else {//caso seja o peão preto q realiza o enPassant contra um peão branco
					pawnPosition = new Position( target.getRow() - 1, target.getColumn() );// posição do peão q será 
					// capturado
				}
				capturedPiece = board.removePiece(pawnPosition);
				capturedPieces.add(capturedPiece);
				piecesOnTheBoard.remove(capturedPiece);
			}
		}

		return capturedPiece;
		
	}
	
	private void undoMove( Position source, Position target, Piece capturedPiece ) {// desfaz um movimento
		// q acabou acabou de ser realizado =, é utilizado no caso do rei entrar em cheque
		// note q como a peça foi movida agora ela está no target e nao no source
		
		ChessPiece p =  (ChessPiece)board.removePiece(target);
		//p foi criado como ChessPiece ao invés de Piece para  poder usar o decreaseMovecount
		
		p.decreaseMoveCount();
		board.placePiece(p, source);
		
		if( capturedPiece != null ) {
			board.placePiece(capturedPiece, target);
			capturedPieces.remove(capturedPiece);
			piecesOnTheBoard.add(capturedPiece);
		}
		
		
		// specialmove castling kingside rook, roque da direita do rei
		//faço movimento da torre
		// note q aqui já foi desfeito o movimento do Rei
		
		if( p instanceof King && target.getColumn() ==  source.getColumn() + 2) {//se moveu o rei duas casa para
			// a direita, então foi realizado o kingside castling
			
			Position sourceT = new Position(source.getRow(), source.getColumn() + 3 );
			Position targetT = new Position(source.getRow(), source.getColumn() + 1 );
			ChessPiece rook = (ChessPiece) board.removePiece(targetT);// note a mudança
			board.placePiece(rook, sourceT);// note a mudança
			rook.decreaseMoveCount();// note a mudança
		}
				
		// specialmove castling QueenSide rook, roque da esquerda do rei
		//faço movimento da torre
		
		if( p instanceof King && target.getColumn() ==  source.getColumn() - 2) {//se moveu o rei duas casa para
			// a esquerda, então foi realizado o QueenSide castling
			
			Position sourceT = new Position(source.getRow(), source.getColumn() - 4 );
			Position targetT = new Position(source.getRow(), source.getColumn() - 1 );
			ChessPiece rook = (ChessPiece) board.removePiece(targetT);// note a mudança
			board.placePiece(rook, sourceT);// note a mudança
			rook.decreaseMoveCount();// note a mudança
		}
		
		
		// #specialMove enPassant
		
		if( p instanceof Pawn ) {//CUIDADO!!!!!!!!  o enPassant não captura a peça na posição de target
			// note q o primeiro if deste método terá colocado o peão capturado na posição de target,
			// precisaremos corrigir isso
			// portanto teremos de fazer um tratamento especial, ele captura a peça em baixo do target no caso do
			// enPassant branco (contra o preto) e captura a peça em cima do target no caso do enPassant preto 
			// (contra o branco)
			// enPassant branco (contra o preto), o peão preto capturado volta para a linha 3
			// enPassant preto (contra o branco), o peão branco capturado volta para a linha 4
			if( source.getColumn() != target.getColumn() && capturedPiece == enPassantVunerable) {// CUIDADO!!!!
				// o programa pode entrar nesse if caso um peão capture, sem realizar um enPassant, o peão
				// do oponente. Porém mesmo assim as linhas abaixo vão colocar o peão capturado novamento na
				// posição correta
				
				// note q caso 
				// o peão tenha movido na diagonal e comido um peão vulnerável ao enPassant então ele PODE (talvez)
				// ter realizado o enPassant
				
				ChessPiece pawn = (ChessPiece)board.removePiece(target);// nessa posição pode ter sido colocado
				// erroneamente ( caso realmennte tenha ocorrido o enPassant ) o peão capturado
				Position pawnPosition;
				if( p.getColor() == Color.WHITE ) {//caso seja o peão branco q realiza o enPassant contra um peão
					// preto
					pawnPosition = new Position( 3, target.getColumn() );// note q independente de ter sido
					// realizado o enPassant o peão capturado volta para a posição correta
				}else {//caso seja o peão preto q realiza o enPassant contra um peão branco
					pawnPosition = new Position( 4, target.getColumn() );// posição do peão q será 
					// capturado
				}
				board.placePiece(pawn, pawnPosition);// note q caso não tenha sido realizado o enPassant o 
				// peão capturado simplesmente volta para a posição de target
				
				// a alteração nas listas já foi realizada no primeiro if desse método
			}
		}
	}
	
	private void validateSourcePosition( Position position ) {// valida a posição de origem, se essa posição não existir lança uma exceção
		
		if( !board.thereIsAPiece(position) ) {
			throw new ChessException("There is no piece on source position");
			// note q como ChessException é uma subclasse de BoardException, quando captura uma ChessException
			// também captura uma possível BoardException
		}
		if( currentPlayer != ( (ChessPiece)board.piece(position) ).getColor()  ) {//caso o jogador tente jogar
			// com a peça o adversário, note q foi necessário fazer um downcasting para acessar o .getColor
			throw new ChessException("The chosen piece is not yours");
		}
		if( !board.piece(position).isThereAnyPossibleMove() ) { // testa se existe algum movimento possível para
			//a peça, ou seja se ela está presa. O método piece() retorna uma peça, é como se fosse um
			// getPiece()
			throw new ChessException("There is no possible moves for the chosen piece");
		}
	}
	
	private void validateTargetPosition( Position source, Position target ) {// valida a posição de destino
		
		if( !board.piece(source).possibleMove(target) ) {
			throw new ChessException("The chosen piece can´t move to target position");
		}
	}
	
	private void nextTurn() {// acrescenta um turno e troca de jogador
		turn++;
		currentPlayer = ( currentPlayer == Color.WHITE ) ? Color.BLACK : Color.WHITE;// expressão condicional 
		// ternária, se currentPlayer == Color.WHITE então CurrentPlayer recebe Color.Black
		// caso contrário currentPlayer = Color.BLACK
	}
	
	private Color opponent( Color color ) {
		return ( color == Color.WHITE) ? Color.BLACK : Color.WHITE;
	}
	
	private ChessPiece king( Color color ) {// localiza e retorna o rei de uma cor
		List<Piece> list = piecesOnTheBoard.stream().filter( x -> ((ChessPiece)x).getColor() == color )
				.collect(Collectors.toList() );
		for( Piece p: list) {//para cada peça p na minha lista list
			if( p instanceof King) {
				return (ChessPiece) p;
			}
		}
		throw new IllegalStateException("There is no " + color + "king on the board!!!");// caso o for não
		// encotre nenhum rei, note q se isso acontecer então o sistema está com
		// problema. Por isso nem vamos tratar essa exceção
	}
	
	private boolean testCheck(Color color) {//testa se o rei está em cheque
		Position kingPosition = king(color).getChessPosition().toPosition();
		List<Piece> opponentPieces = piecesOnTheBoard.stream().filter
				( x -> ((ChessPiece)x).getColor() == opponent(color) ).collect(Collectors.toList() );
		// filtra as peças do oponente
		for( Piece p: opponentPieces ) {// para cada peça p na minha lista opponentPieces
			boolean mat[][] = p.possibleMoves();
			if( mat[kingPosition.getRow()][kingPosition.getColumn()] ) {// se na posição do rei a mat for true
				// então entra no if
				
				return true; //O rei está em cheque
			}
		}
		
		return false;// O rei não está em cheque
	}
	
	private boolean testCheckMate(Color color) {// O rei está em cheque-mate quando ele está em cheque 
		//e não existe nenhum movimento dele ou de uma peça de sua cor q possa tirar o rei do cheque
		
		if( !testCheck(color) ) {
			return false;
		}
		
		//rodar todos os movimentos das peças da cor do rei e testar se para todos esses movimentos o 
		// rei continua em cheque, caso isso seja verdadeiro o rei está em cheque-mate
		
		List<Piece> list = piecesOnTheBoard.stream().filter
				( x -> ((ChessPiece)x).getColor() == color ).collect(Collectors.toList() );
		
		for( Piece p: list) {//vamos testar peça por peça
			boolean mat [][] = p.possibleMoves();
			for (int i = 0; i < board.getRows(); i++) {
				for (int j = 0; j < board.getColumns(); j++) {
					if( mat[i][j] ) {//caso seja possível realizar o movimento
						Position source = ((ChessPiece)p).getChessPosition().toPosition();// é necessário fazer 
						//isso pq o atributo position é protected, note q estamos em uma classe (ChessMatch ) 
						//q não é subclasse de Piece
						Position target = new Position(i, j);
						Piece capturedPiece = makeMove(source, target);
						boolean testCheck = testCheck(color);
						undoMove(source, target, capturedPiece);// vamos testando e desfazendo os movimentos
						
						if( !testCheck ) {
							return false; //encontramos um movimento q tira o rei do cheque
						}
					}				
				}		
			}
		}
		
		return true;
		
	}
	
	private void placeNewPiece( char column, int row, ChessPiece piece ) {// recebe uma peça, uma linha e uma
		//coluna(char) em coordenadas de xadrez e nao de matriz, então ele coloca a peça na posição
		//note que o método precisa converter a posição de xadrez(ChessPosition) para a posição de matriz
		//para isso ele chama o toPosition
		
		board.placePiece(piece, new ChessPosition(column, row).toPosition() );
		piecesOnTheBoard.add(piece);
		
	}
	
	private void initialSetup() {
		// esse método inicia a partida de xadrez, colocando as peças no tabuleiro
		
		//white
		
        placeNewPiece('a', 1, new Rook(board, Color.WHITE));
        placeNewPiece('b', 1, new Knight(board, Color.WHITE));
        placeNewPiece('c', 1, new Bishop(board, Color.WHITE));
        placeNewPiece('d', 1, new Queen(board, Color.WHITE));
        placeNewPiece('e', 1, new King(board, Color.WHITE, this));// this faz auto-referencia ao próprio objeto
        placeNewPiece('f', 1, new Bishop(board, Color.WHITE));
        placeNewPiece('g', 1, new Knight(board, Color.WHITE));
        placeNewPiece('h', 1, new Rook(board, Color.WHITE));
        placeNewPiece('a', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('b', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('c', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('d', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('e', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('f', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('g', 2, new Pawn(board, Color.WHITE, this));
        placeNewPiece('h', 2, new Pawn(board, Color.WHITE, this));
        
        // Black

        placeNewPiece('a', 8, new Rook(board, Color.BLACK));
        placeNewPiece('b', 8, new Knight(board, Color.BLACK));
        placeNewPiece('c', 8, new Bishop(board, Color.BLACK));
        placeNewPiece('d', 8, new Queen(board, Color.BLACK));
        placeNewPiece('e', 8, new King(board, Color.BLACK, this));// this faz auto-referencia ao próprio objeto
        placeNewPiece('f', 8, new Bishop(board, Color.BLACK));
        placeNewPiece('g', 8, new Knight(board, Color.BLACK));
        placeNewPiece('h', 8, new Rook(board, Color.BLACK));
        placeNewPiece('a', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('b', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('c', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('d', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('e', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('f', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('g', 7, new Pawn(board, Color.BLACK, this));
        placeNewPiece('h', 7, new Pawn(board, Color.BLACK, this));
		 
	}
	
}
